"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.pressKeyCode = async function (keycode, metastate = null, flags = null) {
  return await this.uiautomator2.jwproxy.command('/appium/device/press_keycode', 'POST', {
    keycode,
    metastate,
    flags
  });
};
commands.longPressKeyCode = async function (keycode, metastate = null, flags = null) {
  return await this.uiautomator2.jwproxy.command('/appium/device/long_press_keycode', 'POST', {
    keycode,
    metastate,
    flags
  });
};
commands.doSwipe = async function (swipeOpts) {
  return await this.uiautomator2.jwproxy.command(`/touch/perform`, 'POST', swipeOpts);
};
commands.doDrag = async function (dragOpts) {
  return await this.uiautomator2.jwproxy.command(`/touch/drag`, 'POST', dragOpts);
};
commands.getOrientation = async function () {
  return await this.uiautomator2.jwproxy.command(`/orientation`, 'GET', {});
};
commands.setOrientation = async function (orientation) {
  orientation = orientation.toUpperCase();
  return await this.uiautomator2.jwproxy.command(`/orientation`, 'POST', {
    orientation
  });
};
commands.mobilePressKey = async function mobilePressKey(opts = {}) {
  const {
    keycode,
    metastate,
    flags,
    isLongPress = false
  } = opts;
  return await this.uiautomator2.jwproxy.command(`/appium/device/${isLongPress ? 'long_' : ''}press_keycode`, 'POST', {
    keycode,
    metastate,
    flags
  });
};
commands.mobileScheduleAction = async function mobileScheduleAction(opts = {}) {
  return await this.uiautomator2.jwproxy.command('/appium/schedule_action', 'POST', opts);
};
commands.mobileGetActionHistory = async function mobileGetActionHistory(opts) {
  return await this.uiautomator2.jwproxy.command('/appium/action_history', 'POST', opts ?? {});
};
commands.mobileUnscheduleAction = async function mobileUnscheduleAction(opts) {
  return await this.uiautomator2.jwproxy.command('/appium/unschedule_action', 'POST', opts ?? {});
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,